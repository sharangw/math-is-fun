{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "from sklearn import datasets, linear_model\n",
    "import pandas as pd\n",
    "from pandas import DataFrame, Series\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "from sklearn import metrics\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.model_selection import train_test_split\n",
    "sns.set(style='ticks', palette='Set2')\n",
    "%matplotlib inline\n",
    "import os\n",
    "import requests\n",
    "from urllib.parse import urljoin\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1 - Warm up. Grid Search CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Tuning hyper-parameters for precision\n",
      "\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.986 (+/-0.016) for {'C': 1, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.959 (+/-0.029) for {'C': 1, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.988 (+/-0.017) for {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.982 (+/-0.026) for {'C': 10, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.988 (+/-0.017) for {'C': 100, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.982 (+/-0.025) for {'C': 100, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.988 (+/-0.017) for {'C': 1000, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.982 (+/-0.025) for {'C': 1000, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.975 (+/-0.014) for {'C': 1, 'kernel': 'linear'}\n",
      "0.975 (+/-0.014) for {'C': 10, 'kernel': 'linear'}\n",
      "0.975 (+/-0.014) for {'C': 100, 'kernel': 'linear'}\n",
      "0.975 (+/-0.014) for {'C': 1000, 'kernel': 'linear'}\n",
      "\n",
      "Detailed classification report:\n",
      "\n",
      "The model is trained on the full development set.\n",
      "The scores are computed on the full evaluation set.\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        89\n",
      "           1       0.97      1.00      0.98        90\n",
      "           2       0.99      0.98      0.98        92\n",
      "           3       1.00      0.99      0.99        93\n",
      "           4       1.00      1.00      1.00        76\n",
      "           5       0.99      0.98      0.99       108\n",
      "           6       0.99      1.00      0.99        89\n",
      "           7       0.99      1.00      0.99        78\n",
      "           8       1.00      0.98      0.99        92\n",
      "           9       0.99      0.99      0.99        92\n",
      "\n",
      "   micro avg       0.99      0.99      0.99       899\n",
      "   macro avg       0.99      0.99      0.99       899\n",
      "weighted avg       0.99      0.99      0.99       899\n",
      "\n",
      "\n",
      "# Tuning hyper-parameters for recall\n",
      "\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.986 (+/-0.019) for {'C': 1, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.957 (+/-0.029) for {'C': 1, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.987 (+/-0.019) for {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.981 (+/-0.028) for {'C': 10, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.987 (+/-0.019) for {'C': 100, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.981 (+/-0.026) for {'C': 100, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.987 (+/-0.019) for {'C': 1000, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "0.981 (+/-0.026) for {'C': 1000, 'gamma': 0.0001, 'kernel': 'rbf'}\n",
      "0.972 (+/-0.012) for {'C': 1, 'kernel': 'linear'}\n",
      "0.972 (+/-0.012) for {'C': 10, 'kernel': 'linear'}\n",
      "0.972 (+/-0.012) for {'C': 100, 'kernel': 'linear'}\n",
      "0.972 (+/-0.012) for {'C': 1000, 'kernel': 'linear'}\n",
      "\n",
      "Detailed classification report:\n",
      "\n",
      "The model is trained on the full development set.\n",
      "The scores are computed on the full evaluation set.\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        89\n",
      "           1       0.97      1.00      0.98        90\n",
      "           2       0.99      0.98      0.98        92\n",
      "           3       1.00      0.99      0.99        93\n",
      "           4       1.00      1.00      1.00        76\n",
      "           5       0.99      0.98      0.99       108\n",
      "           6       0.99      1.00      0.99        89\n",
      "           7       0.99      1.00      0.99        78\n",
      "           8       1.00      0.98      0.99        92\n",
      "           9       0.99      0.99      0.99        92\n",
      "\n",
      "   micro avg       0.99      0.99      0.99       899\n",
      "   macro avg       0.99      0.99      0.99       899\n",
      "weighted avg       0.99      0.99      0.99       899\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "digits = datasets.load_digits() ## load data\n",
    "\n",
    "n_samples = len(digits.images)\n",
    "X = digits.images.reshape((n_samples,-1)) ## value of columns is inferred\n",
    "y = digits.target\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(  ## split into 50% training and 50% test data\n",
    "    X, y, test_size=0.5, random_state=0)\n",
    "\n",
    "# Set the parameters by cross-validation\n",
    "tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n",
    "                     'C': [1, 10, 100, 1000]},\n",
    "                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n",
    "\n",
    "scores = ['precision','recall']\n",
    "\n",
    "for score in scores:\n",
    "    print(\"# Tuning hyper-parameters for %s\" % score)\n",
    "    print()\n",
    "    \n",
    "    clf = GridSearchCV(SVC(), tuned_parameters, cv=5,  ## build model with tuned paramemeters\n",
    "                       scoring='%s_macro' % score)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    print(\"Best parameters set found on development set:\")\n",
    "    print()\n",
    "    print(clf.best_params_)\n",
    "    print()\n",
    "    print(\"Grid scores on development set:\")\n",
    "    print()\n",
    "    means = clf.cv_results_['mean_test_score']\n",
    "    stds = clf.cv_results_['std_test_score']\n",
    "    \n",
    "    for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "        print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "              % (mean, std * 2, params))\n",
    "    print()\n",
    "    print(\"Detailed classification report:\")\n",
    "    print()\n",
    "    print(\"The model is trained on the full development set.\")\n",
    "    print(\"The scores are computed on the full evaluation set.\")\n",
    "    print()\n",
    "    y_true, y_pred = y_test, clf.predict(X_test)\n",
    "    print(classification_report(y_true, y_pred))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2 - Lasso, Forward Selection, and Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# generate some sparse data to play with\n",
    "np.random.seed(7)\n",
    "\n",
    "n_samples, n_features = 100, 200\n",
    "X = np.random.randn(n_samples, n_features)\n",
    "\n",
    "k = 5\n",
    "# beta generated with k nonzeros\n",
    "coef = 10 * np.ones(n_features)\n",
    "inds = np.arange(n_features)\n",
    "np.random.shuffle(inds)\n",
    "coef[inds[k:]] = 0  # sparsify coef\n",
    "y = np.dot(X, coef)\n",
    "\n",
    "# add noise\n",
    "y += 0.01 * np.random.normal((n_samples,))\n",
    "\n",
    "# Split data in train set and test set\n",
    "# n_samples = X.shape[0]\n",
    "X_train, y_train = X[25:], y[25:]\n",
    "X_test, y_test = X[:25], y[:25]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train1, y_train1 = X[25:], y[25:]\n",
    "X_test1, y_test1 = X[:25], y[:25]\n",
    "\n",
    "OLS = LinearRegression()\n",
    "OLS.fit(X_train,y_train).predict(X_test)\n",
    "y_pred_OLS = OLS.fit(X_train, y_train).predict(X_test)\n",
    "r2_score_OLS = r2_score(y_test, y_pred_OLS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best features which returns R2 score of 1.0:  [18, 51, 34, 78, 15]\n",
      "Order in which features were added:\n",
      "[18, 51, 34, 78, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n"
     ]
    }
   ],
   "source": [
    "primary_features = []\n",
    "\n",
    "score = 0.0\n",
    "while score != 1.0: ## keep running until the R2 score is 1\n",
    "    best_feature = 0\n",
    "    ## get the difference between all 200 features and the chosen features so far\n",
    "    for current_feature in np.setdiff1d(list(range(n_features)), primary_features).tolist(): \n",
    "        current_features = primary_features + [current_feature]\n",
    "        reg = LinearRegression().fit(X_train[:, current_features], y_train)\n",
    "        current_score = r2_score(y_train, reg.predict(X_train[:, current_features]))\n",
    "        if current_score > score:\n",
    "            best_feature, score = current_feature, current_score\n",
    "    primary_features.append(best_feature)\n",
    "\n",
    "ordered_features = primary_features + np.setdiff1d(list(range(n_features)), primary_features).tolist()\n",
    "        \n",
    "print('The best features which returns R2 score of 1.0: ', primary_features)\n",
    "print('Order in which features were added:')\n",
    "print(ordered_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_errors = np.array([])\n",
    "for i in range(1,200):\n",
    "    X_train, y_train = X[:25,:i], y[:25]\n",
    "    X_test, y_test = X[25:,:i], y[25:]\n",
    "    \n",
    "    OLS = LinearRegression()\n",
    "    OLS.fit(X_train,y_train).predict(X_test)\n",
    "    y_pred_OLS = OLS.fit(X_train, y_train).predict(X_test)\n",
    "    r2_score_OLS = r2_score(y_test, y_pred_OLS)\n",
    "    #print(r2_score_OLS)\n",
    "    test_error = 1 - r2_score_OLS\n",
    "    #print(OLS)\n",
    "    mse = metrics.mean_squared_error(y_test, y_pred_OLS) \n",
    "#     print(i)\n",
    "#     print(r2_score_OLS)\n",
    "    test_errors=np.append(test_errors,mse)\n",
    "    #print(\"Test Error is : %f\" % test_error)\n",
    "fig=plt.subplots(figsize=(15,8))\n",
    "plt.plot(range(1, 200), test_errors, marker='o')\n",
    "plt.xlabel('Number of Features')\n",
    "plt.ylabel('Test Error')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Source: \"http://scikit-learn.sourceforge.net/stable/modules/generated/sklearn.grid_search.GridSearchCV.html\"\n",
    "\n",
    "Exhaustive search over specified parameter values for an estimator.\n",
    "\n",
    "Important members are fit, predict.\n",
    "\n",
    "GridSearchCV implements a “fit” method and a “predict” method like any classifier except that the parameters of the classifier used to predict is optimized by cross-validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "# lasso regression has constraints on the size of the coefficients being used\n",
    "# so necessary to standardize the variables\n",
    "sc = StandardScaler()\n",
    "sc.fit(X_train)\n",
    "X_train_std = sc.transform(X_train)\n",
    "\n",
    "# specify some parameter values\n",
    "param_grid = [\n",
    "    {'alpha':[1.0,0.0,0.1,0.01,0.001]}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "       estimator=Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "   normalize=False, positive=False, precompute=False, random_state=None,\n",
       "   selection='cyclic', tol=0.0001, warm_start=False),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid=[{'alpha': [1.0, 0.0, 0.1, 0.01, 0.001]}],\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Lasso() # use Lasso model \n",
    "lasso_grid = GridSearchCV(model, param_grid, cv=5) \n",
    "lasso_grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.01, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "   normalize=False, positive=False, precompute=False, random_state=None,\n",
       "   selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_grid.fit(X_train_std, y_train)\n",
    "lasso_grid.best_estimator_ # get the best alpha value for cv = 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv: 2\n",
      "Lasso(alpha=0.01, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=None,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False)\n",
      "cv: 10\n",
      "Lasso(alpha=0.1, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=None,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False)\n",
      "cv: 15\n",
      "Lasso(alpha=0.1, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=None,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False)\n",
      "cv: 25\n",
      "Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=None,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False)\n"
     ]
    }
   ],
   "source": [
    "cv = [2,10,15,25] # test for some different values of CV\n",
    "for i in cv:\n",
    "    lasso_grid = GridSearchCV(model, param_grid, cv=i)\n",
    "    lasso_grid.fit(X_train_std, y_train)\n",
    "    print(\"cv: \" + str(i))\n",
    "    print(lasso_grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the number of folds in the CV increases, the optimal value of the hyperparameter becomes closer to 1.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Implementing LassoCV with 1000 iter. and 5-fold CV\n",
      "LassoCV alpha = 2.018316500014024\n"
     ]
    }
   ],
   "source": [
    "max_iter = 1000\n",
    "cv = 5\n",
    "reg = LassoCV(max_iter=max_iter, cv=cv)\n",
    "print('Implementing LassoCV with {} iter. and {}-fold CV'.format(max_iter, cv))\n",
    "lassocv = reg.fit(X_train_std, y_train)\n",
    "print('LassoCV alpha = {}'.format(lassocv.alpha_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Implementing LassoCV with 1000 iter. and 2-fold CV\n",
      "LassoCV alpha = 4.055268121449756\n",
      "Implementing LassoCV with 1000 iter. and 5-fold CV\n",
      "LassoCV alpha = 2.018316500014024\n",
      "Implementing LassoCV with 1000 iter. and 10-fold CV\n",
      "LassoCV alpha = 0.6609076605543233\n",
      "Implementing LassoCV with 1000 iter. and 15-fold CV\n",
      "LassoCV alpha = 0.05360825797806968\n",
      "Implementing LassoCV with 1000 iter. and 25-fold CV\n",
      "LassoCV alpha = 0.24882749162044132\n"
     ]
    }
   ],
   "source": [
    "cv = [2,5,10,15,25] # test for some different values of CV\n",
    "max_iter = 1000\n",
    "for i in cv:\n",
    "    regres = LassoCV(max_iter=max_iter, cv=i, copy_X=False, n_jobs=1)\n",
    "    print('Implementing LassoCV with {} iter. and {}-fold CV'.format(max_iter, i))\n",
    "    lassocv = regres.fit(X_train_std, y_train)\n",
    "    print('LassoCV alpha = {}'.format(lassocv.alpha_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The optimal value of the hyperparameter behaves very differently when LassoCV is used vs. GridSearchCV. GridSearch has some specified parameter values that we give to the model but LassoCV computes and returns the optimal trained alpha/hyperparameter value."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 3 - A Mathematical Theory of Communication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    To begin with, I learned about the design of Shannon’s structure of a general communication system. The structure starts with an information source that produces a message which can be a sequence of letters or a function(s) of time. The message is sent to a transmitter which does a telephonic or telegraphic operation, depending on the nature of the message, to generate a signal that can be used transmit the message over a channel. A channel in this structure can be wires, a cable, a beam of light, or anything that can be used to send a signal from the transmitter to a receiver. The structure thus also consists of a receiver and a destination. The receiver performs the opposite of the operation done by the transmitter to obtain a message from the signal and the destination is the counterpart to the information source. Moreover, there are various types of communication systems: discrete, continuous, and mixed. In particular, I learned how there can be a mixed system in which both discrete and continuous variables appear. An example is Pulse Code Modulation, where a signal is pulse code modulated to convert its analog information, represented by continuous variables, into a binary (discrete) sequence.\n",
    "\n",
    "    Furthermore, in the case of discrete systems, I learned how there are some interesting and increasingly complex ways of generating the sequence of letters which forms the initial message. The simplest method is to take some letters, assign them independent probabilities, and create a message analogous to one long word by using the probabilities of those letters occurring for each symbol or letter in the sequence. Another way would be to take into account the preceding symbol when defining the probabilities of successive symbols being chosen. In this case, the constructed message would be less random than before and contain more visible patterns of symbols within the sequence, given the probabilities of a particular symbol appearing after another. The final level of complexity would be to use the preceding two symbols to determine the probabilities and then generate the sequence. The same three ways can be applied to whole words instead of letters to create a message analogous to a sentence. Words, in this instance, are just a group of random letters. These processes have intriguing results when applied to the English language and to its entire alphabet. Shannon shows how the methods of generating the message, from zero-order to second-word approximation i.e. from independent probabilities for each symbol to using the preceding two letters and/or words to determine the probabilities of successive letters/words, results in the message looking more and more like natural English text. Also, there is a group among the discrete processes called the \"ergodic\" processes where every sequence is statistically the same. All of the aforementioned processes can be said to be ergodic because they produce sequences which have the same statistical properties. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install tabula-py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install -U selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scrape the files from the url into your local machine\n",
    "# Execute only once. This scrapes the website and copies the pdf files to your local machine\n",
    "import os\n",
    "import requests\n",
    "from urllib.parse import urljoin\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "url = \"http://proceedings.mlr.press/v97/\"\n",
    "\n",
    "#If there is no such folder, the script will create one automatically\n",
    "folder_location = r'C:\\Fall - BDS\\HW 4\\pdfiles'\n",
    "if not os.path.exists(folder_location):os.mkdir(folder_location)\n",
    "\n",
    "response = requests.get(url)\n",
    "soup= BeautifulSoup(response.text, \"html.parser\")     \n",
    "for link in soup.select(\"a[href$='.pdf']\"):\n",
    "    #Name the pdf files using the last portion of each link which are unique in this case\n",
    "    filename = os.path.join(folder_location,link['href'].split('/')[-1])\n",
    "    with open(filename, 'wb') as f:\n",
    "        f.write(requests.get(urljoin(url,link['href'])).content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a text file on our local machine, in this case : testing.txt\n",
    "# Read all the pdf files and write its contents to the text file.\n",
    "# Execute only once.\n",
    "import glob\n",
    "from tika import parser\n",
    "\n",
    "path =r'C:\\Fall - BDS\\HW 4\\pdfiles'\n",
    "all_files = glob.glob(path + \"/*.pdf\")\n",
    "i = 1\n",
    "with open('testing.txt', 'a', encoding='utf-8') as file:\n",
    "    for filename in all_files:\n",
    "        try:\n",
    "            print(\"Reading file:\")\n",
    "            print(filename)\n",
    "            i=i+1\n",
    "            raw = parser.from_file(filename)\n",
    "            text = raw['content']\n",
    "        # text = text.replace('\\n\\n', '\\n')\n",
    "            text = text.strip('\\n')\n",
    "            text = text.replace('\\n','')\n",
    "            text = text.replace('\\t','')\n",
    "        #with open('testing.txt', 'a', encoding='utf-8') as file:\n",
    "            file.write(text)\n",
    "        except:\n",
    "            #print(i)\n",
    "            pass\n",
    "file.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.1 Top 10 Common Words"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assumption : Stop words have been counted as part of the common words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('the', 317958),\n",
       " ('of', 176607),\n",
       " ('and', 151282),\n",
       " ('to', 104445),\n",
       " ('a', 100178),\n",
       " ('is', 91942),\n",
       " ('in', 88688),\n",
       " ('for', 74951),\n",
       " ('=', 71116),\n",
       " ('we', 60425)]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the count of 10 most frequent words.\n",
    "from collections import Counter\n",
    "\n",
    "file = open('testing.txt', \"r\", encoding=\"utf-8-sig\")\n",
    "wordcount={}\n",
    "for word in file.read().split():\n",
    "    if word not in wordcount:\n",
    "        wordcount[word] = 1\n",
    "    else:\n",
    "        wordcount[word] += 1\n",
    "#for k,v in wordcount.items():\n",
    "    #print(k, v)\n",
    "file.close()\n",
    "word_frequency = Counter(wordcount)\n",
    "word_frequency.most_common(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Randomly selecting file: haviv19a.pdf\n"
     ]
    }
   ],
   "source": [
    "# randomly select a file and then a word in that file. Lets call it Z. Calculate the entropy of Z.\n",
    "import random\n",
    "import nltk\n",
    "import glob\n",
    "files=[]\n",
    "path =r'C:\\Fall - BDS\\HW 4\\pdfiles'\n",
    "all_files = glob.glob(path + \"/*.pdf\")\n",
    "for file in all_files:\n",
    "    files.append(file)\n",
    "random_file = random.choice(files)\n",
    "file_name = random_file[(random_file.rfind('\\\\')+1):len(random_file)]\n",
    "print(\"Randomly selecting file:\",file_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'that'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read the pdf contents into text, tokenize the sentences and then randomly choose any one word\n",
    "from tika import parser\n",
    "raw = parser.from_file(random_file)\n",
    "text = raw['content']\n",
    "# text = text.replace('\\n\\n', '\\n')\n",
    "text = text.strip('\\n')\n",
    "text = text.replace('\\n','')\n",
    "text = text.replace('\\t','')\n",
    "# text\n",
    "#tokenize the string\n",
    "tokens = nltk.word_tokenize(text.lower())\n",
    "#randomly select a word\n",
    "random_token = random.choice(tokens)\n",
    "random_token"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The entropy  of the randomly chosen word: that from the randomly chosen file: haviv19a.pdf is :\n",
      "0.05915035299384212\n"
     ]
    }
   ],
   "source": [
    "freqList=[]\n",
    "ctr = 0\n",
    "for word in tokens:    \n",
    "    if word == random_token:\n",
    "            ctr += 1\n",
    "#freq = (float(ctr) / len(tokens))\n",
    "freqList.append(float(ctr) / len(tokens))\n",
    "# Shannon entropy\n",
    "import math\n",
    "ent = 0.0\n",
    "for freq in freqList:\n",
    "    ent = ent + freq * math.log(freq, 2)\n",
    "ent = -ent\n",
    "print('The entropy  of the randomly chosen word: ' + random_token + \" from the randomly chosen file: \" + file_name + \" is :\")\n",
    "print(ent)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Synthesize a random paragraph\n",
    "#Assumption : Word frequency is used instead of marginal probability.\n",
    "# 500 words were chosen to form the paragraph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' the of and to a is in for = we that with on et as . by + are be al., − In The can this from ∈ , an We which ≤ 1 our at all it each not & have learning model set · using 2 where For function such data A if use any has 0 or also training two pp. This number ≥ al. over > algorithm � then one only when used first A., more between 1, than results J. J., distribution its A. different bound show these will gradient neural same Conference M., Learning loss S., given following but other : both some M. models ) probability random k T 1. < problem there matrix X S. Let 3 method log linear Theorem policy network methods i Neural time value performance deep Figure x their D. International | optimal f Lemma size into test n case Section based error R. F 4 consider via D., t was defined 0, under networks approach input P N parameters rate work := while so sample may large optimization vector samples algorithms point space Machine standard most Proceedings state been Algorithm proposed → new does P. To adversarial arXiv Y., S since shows stochastic R., 5 C., how 2. 2, However, shown As lower trained information ∼ convergence do It functions order 10 result they parameter proof T., Gaussian similar graph C. Our values least class points kernel Advances K., latent dataset objective convex denote Y noise layer second see analysis step P., no image accuracy mean Information well V feature ofthe small If p without let output terms fixed better above define sampling constant L., would follows term task ± provide H., every assume target - us G., bounds local preprint setting many general learn approximation T. inequality single solution reward high C d j B., best Processing Y. find 1) G. α Deep L. even complexity obtain estimate now prove form due main corresponding three features through inference true prior Journal 3. need networks. M 2017; sequence learning. upper K. R × Note N., experiments action (1− D distance respect machine agent variance after were Appendix K m average On because 6 simple empirical Table further E. r Eq. y examples images 100 Bayesian [0, classification ← B. cost 1− holds structure propose IEEE 0. bounded Since exists By s compute regret positive original z 8 train present possible c up weights node obtained make thus very variable 2018) continuous expected learned (0, generated γ B descent Then found i.e., note approximate (see τ robust generative example λ variational process weight variables h estimation layers posterior 6= update could search θ 2018; last previous fact H. Systems, across H measure b 2017) multiple 20 example, distributions full much implies L independent tasks still global a) condition An I., g about N. E., batch β data. uses prediction total goal label vectors Learning, 4. Computer apply sets Then, out v hidden denotes should requires definition classifier several'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paragraph = ''\n",
    "common_words = word_frequency.most_common(500)\n",
    "for words in common_words:\n",
    "    paragraph = paragraph + ' ' + (words[0])\n",
    "paragraph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_arsenic = pd.read_csv('wells.dat', sep=' ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_arsenic.loc[:,[\"dist\"]].values # only include one feature - distance\n",
    "y = df_arsenic.loc[:,[\"switch\"]].values\n",
    "# split into train and test data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3, random_state=1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run logistic regression\n",
    "LR = LogisticRegression(fit_intercept = True, random_state=0)\n",
    "LR.fit(X_train,y_train)\n",
    "y_pred = LR.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.006180340755753423"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get coefficient for distance feature\n",
    "beta = LR.coef_[0][0]\n",
    "beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5964069608465984"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intercept = LR.intercept_[0]\n",
    "intercept"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define logistic function using the coefficient and intercept gathered from regression\n",
    "x = X_test\n",
    "t = beta*x + intercept\n",
    "y = 1/(1+np.exp(-t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10,7))\n",
    "plt.scatter(x = X_test, y = y_pred, s = 20, marker='*', c='blue',)\n",
    "plt.plot(x, y)\n",
    "plt.xlabel(\"dist\")\n",
    "plt.ylabel(\"switch\")\n",
    "plt.title(\"Switching probablity vs. distance to nearest safe well\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.15450851889383557\n"
     ]
    }
   ],
   "source": [
    "print((beta/4)*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to the \"rule of four,\" for every increase of 100 meters of distance to the nearest well, the probability of switching wells will decrease by approximately 15.5%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change x to the distance and arsenic features\n",
    "X_new = df_arsenic.loc[:,[\"arsenic\",\"dist\"]].values\n",
    "y = df_arsenic.loc[:,[\"switch\"]].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split test train data and run regression\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size = .3, random_state=0)\n",
    "LR_2 = LogisticRegression(fit_intercept = True, random_state=0)\n",
    "LR_2.fit(X_train,y_train)\n",
    "y_pred = LR_2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.42792299, -0.00943456]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR_2.coef_ ## dist, arsenic coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The coefficents are -0.00943456 for distance and 0.42792299 for arsenic levels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# standardize the two features\n",
    "sc = StandardScaler()\n",
    "sc.fit(X_new)\n",
    "X_std = sc.transform(X_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.47314458, -0.36209611]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# run regression on the standardized x\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_std, y, test_size = .3, random_state=0)\n",
    "LR = LogisticRegression(fit_intercept = True, random_state=0)\n",
    "LR.fit(X_train,y_train)\n",
    "LR.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## After standardizing both the features, the coefficient is 0.473 for arsenic and -0.362 for distance. Thus, the level of arsenic is a more significant factor than distance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3984547461368654\n"
     ]
    }
   ],
   "source": [
    "# use all features\n",
    "X_all = df_arsenic.loc[:,[\"arsenic\",\"dist\",\"assoc\",\"educ\"]].values\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_all, y, test_size = .3, random_state=1)\n",
    "clf = LogisticRegressionCV(cv=10, random_state=0, multi_class='multinomial').fit(X_train, y_train)\n",
    "score = clf.score(X_test, y_test)\n",
    "print(1-score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add interaction terms for arsenic\n",
    "X_arsenic_assoc = df_arsenic[\"arsenic\"]*df_arsenic[\"assoc\"]\n",
    "df_arsenic[\"arsenic_assoc\"] = X_arsenic_assoc\n",
    "\n",
    "X_arsenic_dist = df_arsenic[\"arsenic\"]*df_arsenic[\"dist\"]\n",
    "df_arsenic[\"arsenic_dist\"] = X_arsenic_dist\n",
    "\n",
    "X_arsenic_educ = df_arsenic[\"arsenic\"]*df_arsenic[\"educ\"]\n",
    "df_arsenic[\"arsenic_educ\"] = X_arsenic_educ\n",
    "\n",
    "# add interaction terms \n",
    "X_dist_assoc = df_arsenic[\"dist\"]*df_arsenic[\"assoc\"]\n",
    "df_arsenic[\"dist_assoc\"] = X_dist_assoc\n",
    "\n",
    "X_dist_educ = df_arsenic[\"dist\"]*df_arsenic[\"educ\"]\n",
    "df_arsenic[\"dist_educ\"] = X_dist_educ\n",
    "\n",
    "X_assoc_educ = df_arsenic[\"assoc\"]*df_arsenic[\"educ\"]\n",
    "df_arsenic[\"assoc_educ\"] = X_assoc_educ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "interactionList = []\n",
    "interactionList = [\"arsenic_educ\", \"arsenic_assoc\", \"arsenic_dist\", \"dist_assoc\", \"dist_educ\", \"assoc_educ\"]\n",
    "size = len(interactionList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [\"arsenic\",\"dist\",\"assoc\",\"educ\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "interaction terms: ('arsenic_educ',)\n",
      "0.3841059602649006\n",
      "interaction terms: ('arsenic_assoc',)\n",
      "0.39514348785871967\n",
      "interaction terms: ('arsenic_dist',)\n",
      "0.3973509933774835\n",
      "interaction terms: ('dist_assoc',)\n",
      "0.4028697571743929\n",
      "interaction terms: ('dist_educ',)\n",
      "0.39403973509933776\n",
      "interaction terms: ('assoc_educ',)\n",
      "0.4017660044150111\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc')\n",
      "0.38520971302428253\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist')\n",
      "0.38631346578366443\n",
      "interaction terms: ('arsenic_educ', 'dist_assoc')\n",
      "0.38852097130242824\n",
      "interaction terms: ('arsenic_educ', 'dist_educ')\n",
      "0.3785871964679912\n",
      "interaction terms: ('arsenic_educ', 'assoc_educ')\n",
      "0.38631346578366443\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist')\n",
      "0.39293598233995586\n",
      "interaction terms: ('arsenic_assoc', 'dist_assoc')\n",
      "0.3984547461368654\n",
      "interaction terms: ('arsenic_assoc', 'dist_educ')\n",
      "0.3841059602649006\n",
      "interaction terms: ('arsenic_assoc', 'assoc_educ')\n",
      "0.4006622516556292\n",
      "interaction terms: ('arsenic_dist', 'dist_assoc')\n",
      "0.39624724061810157\n",
      "interaction terms: ('arsenic_dist', 'dist_educ')\n",
      "0.38741721854304634\n",
      "interaction terms: ('arsenic_dist', 'assoc_educ')\n",
      "0.4017660044150111\n",
      "interaction terms: ('dist_assoc', 'dist_educ')\n",
      "0.39183222958057395\n",
      "interaction terms: ('dist_assoc', 'assoc_educ')\n",
      "0.4039735099337748\n",
      "interaction terms: ('dist_educ', 'assoc_educ')\n",
      "0.38520971302428253\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist')\n",
      "0.3785871964679912\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'dist_assoc')\n",
      "0.3841059602649006\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'dist_educ')\n",
      "0.3785871964679912\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'assoc_educ')\n",
      "0.3841059602649006\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'dist_assoc')\n",
      "0.3818984547461368\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'dist_educ')\n",
      "0.3752759381898455\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'assoc_educ')\n",
      "0.38852097130242824\n",
      "interaction terms: ('arsenic_educ', 'dist_assoc', 'dist_educ')\n",
      "0.3796909492273731\n",
      "interaction terms: ('arsenic_educ', 'dist_assoc', 'assoc_educ')\n",
      "0.38852097130242824\n",
      "interaction terms: ('arsenic_educ', 'dist_educ', 'assoc_educ')\n",
      "0.38741721854304634\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'dist_assoc')\n",
      "0.39183222958057395\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'dist_educ')\n",
      "0.39624724061810157\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'assoc_educ')\n",
      "0.39403973509933776\n",
      "interaction terms: ('arsenic_assoc', 'dist_assoc', 'dist_educ')\n",
      "0.39183222958057395\n",
      "interaction terms: ('arsenic_assoc', 'dist_assoc', 'assoc_educ')\n",
      "0.4017660044150111\n",
      "interaction terms: ('arsenic_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.3830022075055187\n",
      "interaction terms: ('arsenic_dist', 'dist_assoc', 'dist_educ')\n",
      "0.39293598233995586\n",
      "interaction terms: ('arsenic_dist', 'dist_assoc', 'assoc_educ')\n",
      "0.4039735099337748\n",
      "interaction terms: ('arsenic_dist', 'dist_educ', 'assoc_educ')\n",
      "0.38520971302428253\n",
      "interaction terms: ('dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.39403973509933776\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist', 'dist_assoc')\n",
      "0.38520971302428253\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist', 'dist_educ')\n",
      "0.3741721854304636\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist', 'assoc_educ')\n",
      "0.3763796909492274\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'dist_assoc', 'dist_educ')\n",
      "0.3763796909492274\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'dist_assoc', 'assoc_educ')\n",
      "0.4039735099337748\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.3719646799116998\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'dist_assoc', 'dist_educ')\n",
      "0.3785871964679912\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'dist_assoc', 'assoc_educ')\n",
      "0.39072847682119205\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'dist_educ', 'assoc_educ')\n",
      "0.38631346578366443\n",
      "interaction terms: ('arsenic_educ', 'dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.3830022075055187\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'dist_assoc', 'dist_educ')\n",
      "0.38520971302428253\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'dist_assoc', 'assoc_educ')\n",
      "0.39403973509933776\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'dist_educ', 'assoc_educ')\n",
      "0.3818984547461368\n",
      "interaction terms: ('arsenic_assoc', 'dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.38520971302428253\n",
      "interaction terms: ('arsenic_dist', 'dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.39403973509933776\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist', 'dist_assoc', 'dist_educ')\n",
      "0.3796909492273731\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist', 'dist_assoc', 'assoc_educ')\n",
      "0.38852097130242824\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'arsenic_dist', 'dist_educ', 'assoc_educ')\n",
      "0.3818984547461368\n",
      "interaction terms: ('arsenic_educ', 'arsenic_assoc', 'dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.3807947019867549\n",
      "interaction terms: ('arsenic_educ', 'arsenic_dist', 'dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.3818984547461368\n",
      "interaction terms: ('arsenic_assoc', 'arsenic_dist', 'dist_assoc', 'dist_educ', 'assoc_educ')\n",
      "0.38852097130242824\n"
     ]
    }
   ],
   "source": [
    "from itertools import combinations \n",
    "\n",
    "scores = []\n",
    "for i in range(1,size):\n",
    "    \n",
    "    comb = combinations(interactionList,i) # get all combinations of the interaction terms of length i\n",
    "  \n",
    "    # loop over the obtained combinations of interaction terms\n",
    "    for j in list(comb): \n",
    "        print(\"interaction terms: \" + str(j))\n",
    "        interactions = list(j) # convert from tuple to list\n",
    "        X_all = df_arsenic.loc[:,features+interactions].values # add the features to the interaction terms\n",
    "        \n",
    "        # split data and run regression\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X_all, y, test_size = .3, random_state=1)\n",
    "        clf = LogisticRegressionCV(cv=10, random_state=0, multi_class='multinomial').fit(X_train, y_train)\n",
    "        \n",
    "        # get accuracy for test data\n",
    "        score = clf.score(X_test, y_test)\n",
    "        \n",
    "        # test error\n",
    "        print(1-score)\n",
    "        scores.append(1-score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3719646799116998"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The test error of the best model is 0.3719646799116998"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# THE END"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
